// app.js
const express = require('express');
const mongoose = require('mongoose');
const axios = require('axios');
const bodyParser = require('body-parser');

// --- CONFIGURACI√ìN ---
// Es crucial que 'app' se defina inmediatamente despu√©s de las importaciones
const app = express();
app.use(bodyParser.json());

// Puerto (usado por Render)
const PORT = process.env.PORT || 10000; // Render usa 10000 por defecto

// Tu token secreto para el endpoint admin (debe estar en Render ENV)
const ADMIN_TOKEN = process.env.ADMIN_API_KEY;

// Validaci√≥n de variables cr√≠ticas de entorno
if (!ADMIN_TOKEN) {
    console.error("‚ùå FALTA LA VARIABLE DE ENTORNO: ADMIN_API_KEY");
    // process.exit(1); // Opcional: detener el inicio si es cr√≠tica
}

// Conectar a MongoDB (usando variable de entorno)
mongoose.connect(process.env.MONGODB_URI)
    .then(() => console.log('‚úÖ Conectado a MongoDB'))
    .catch(err => {
        console.error('‚ùå Error al conectar a MongoDB:', err);
        // process.exit(1); // Salir si no se puede conectar a la base de datos
    });

// --- MODELOS MONGOOSE ---

// Modelo de Usuario (Registro)
const UserSchema = new mongoose.Schema({
    nombre: { type: String, required: true },
    apellido: { type: String, required: true },
    cedula: { type: String, unique: true, required: true, index: true }, // √çndice para b√∫squedas r√°pidas
    telefono: { type: String, required: true },
    estado: { type: String, default: 'verificado' },
}, { timestamps: true }); // A√±ade createdAt y updatedAt

const User = mongoose.model('User', UserSchema);

// Modelo de Stream (Transmisiones)
// Asumimos que el usuario ya est√° registrado, por lo que usamos c√©dula como identificador
const StreamSchema = new mongoose.Schema({
    enlace: { type: String, required: true },
    ciudad: { type: String, required: true },
    cedulaUsuario: { type: String, required: true }, // Referencia a la c√©dula del usuario
    estado: { type: String, default: 'pendiente' },
}, { timestamps: true });

const Stream = mongoose.model('Stream', StreamSchema);

// --- CONFIGURACI√ìN DE GREEN API ---
const ID_INSTANCE = process.env.GREEN_API_ID_INSTANCE;
const API_TOKEN_INSTANCE = process.env.GREEN_API_TOKEN_INSTANCE;

if (!ID_INSTANCE || !API_TOKEN_INSTANCE) {
    console.error("‚ùå FALTAN LAS VARIABLES DE ENTORNO: GREEN_API_ID_INSTANCE o GREEN_API_TOKEN_INSTANCE");
    // process.exit(1);
}

// --- FUNCIONES AUXILIARES ---

// Funci√≥n para enviar mensajes por WhatsApp usando la API REST de Green API
async function sendWhatsAppMessage(phone, message) {
    // ‚úÖ Correcci√≥n: Eliminar espacio extra en la URL
    const url = `https://api.green-api.com/waInstance${ID_INSTANCE}/sendMessage/${API_TOKEN_INSTANCE}`;

    // Asegurarse de que el n√∫mero tenga el formato correcto para Green API
    const cleanPhone = phone.replace('@c.us', '').replace('+', '');
    const chatId = `${cleanPhone}@c.us`;

    const data = {
        chatId: chatId,
        message: message
    };

    try {
        const response = await axios.post(url, data, {
            headers: {
                'Content-Type': 'application/json'
            },
            timeout: 15000 // Timeout de 15 segundos para llamadas externas
        });
        console.log('‚úÖ Mensaje enviado a', chatId, ':', response.data?.id || 'ID no disponible');
        return { success: true, data: response.data };
    } catch (error) {
        console.error('‚ùå Error al enviar mensaje a', chatId, ':', error.response?.data || error.message);
        return { success: false, error: error.message };
    }
}

// Estado de conversaci√≥n por usuario (en memoria)
// ‚ö†Ô∏è Para producci√≥n, usar una base de datos como Redis ser√≠a m√°s robusto
const userConversationState = new Map();

// --- ENDPOINTS ---

// Endpoint para registrar usuarios desde admin (protegido por token)
app.post('/admin/register-user', async (req, res) => {
    const { nombre, apellido, cedula, telefono } = req.body;
    const token = req.headers['x-api-key'];

    // Verificar token de autenticaci√≥n
    if (!token || token !== ADMIN_TOKEN) {
        console.warn('‚ö†Ô∏è Intento de acceso no autorizado al endpoint /admin/register-user');
        return res.status(401).send('‚ùå Acceso denegado. Token inv√°lido.');
    }

    // Validaci√≥n b√°sica de datos de entrada
    if (!nombre || !apellido || !cedula || !telefono) {
        return res.status(400).send('‚ùå Faltan datos: nombre, apellido, c√©dula y tel√©fono son obligatorios.');
    }

    try {
        // --- Validaci√≥n de C√©dula ---
        // Asumimos formato V-12345678 o E-12345678
        const cedulaRegex = /^([VE])-(\d{8})$/i;
        const match = cedula.match(cedulaRegex);

        if (!match) {
            await sendWhatsAppMessage(telefono, '‚ùå Formato de c√©dula inv√°lido para registro admin. Usa V-12345678 o E-12345678.');
            return res.status(400).send('‚ùå Formato de c√©dula inv√°lido. Usa V-12345678 o E-12345678.');
        }

        const nacionalidad = match[1].toUpperCase();
        const numCedula = match[2];

        console.log(`üîç Validando c√©dula ${nacionalidad}-${numCedula}...`);
        // ‚úÖ Correcci√≥n: Eliminar espacio extra en la URL
        const response = await axios.get(`https://api.cedula.com.ve/api/v1`, {
            params: {
                app_id: '1339', // Considerar usar variables de entorno tambi√©n para estos
                token: '6a97ffc07f52fa8dc487e4d3a4e69f33',
                nacionalidad: nacionalidad,
                cedula: numCedula,
            },
            timeout: 15000 // Timeout de 15 segundos
        });

        console.log('üìÑ Respuesta de API de c√©dula (admin):', JSON.stringify(response.data, null, 2));

        // Manejo de errores de la API de c√©dula
        if (response.data.error) {
            console.error('‚ùå Error de la API de c√©dula (admin):', response.data.error);
            if (response.data.error.toLowerCase().includes('rate limit')) {
                await sendWhatsAppMessage(telefono, '‚ö†Ô∏è L√≠mite de solicitudes a la API de c√©dula alcanzado. Por favor, int√©ntalo m√°s tarde.');
                return res.status(429).send('‚ö†Ô∏è L√≠mite de solicitudes a la API de c√©dula alcanzado. Por favor, int√©ntalo m√°s tarde.');
            } else {
                await sendWhatsAppMessage(telefono, `‚ùå La c√©dula ${cedula} no es v√°lida o no se encontr√≥ en los registros oficiales.`);
                return res.status(400).send(`‚ùå La c√©dula ${cedula} no es v√°lida o no se encontr√≥.`);
            }
        }

        // Verificar estructura de la respuesta
        if (!response.data.data || !response.data.data.primer_nombre || !response.data.data.primer_apellido) {
            console.error('‚ùå Estructura de respuesta inesperada de la API de c√©dula (admin).');
            await sendWhatsAppMessage(telefono, '‚ùå Error inesperado al validar la c√©dula. Int√©ntalo m√°s tarde.');
            return res.status(500).send('‚ùå Error inesperado al validar la c√©dula.');
        }

        const apiNombre = response.data.data.primer_nombre;
        const apiApellido = response.data.data.primer_apellido;

        // Comparar nombres (b√∫squeda parcial para mayor flexibilidad)
        if (!apiNombre.toLowerCase().includes(nombre.toLowerCase()) || !apiApellido.toLowerCase().includes(apellido.toLowerCase())) {
            await sendWhatsAppMessage(telefono, `‚ùå Los datos proporcionados (${nombre} ${apellido}) no coinciden con los registros oficiales para la c√©dula ${cedula}.`);
            return res.status(400).send('‚ùå Los datos no coinciden con los registros oficiales.');
        }

        // --- Guardar en MongoDB ---
        const newUser = new User({ nombre, apellido, cedula, telefono });
        await newUser.save();
        console.log(`‚úÖ Usuario ${nombre} ${apellido} (${cedula}) registrado exitosamente v√≠a admin.`);

        // Notificar por WhatsApp (opcional)
        // await sendWhatsAppMessage(telefono, `‚úÖ ¬°Registro exitoso v√≠a admin! Bienvenido, ${nombre} ${apellido}.`);

        res.status(201).send(`‚úÖ Usuario ${nombre} ${apellido} (${cedula}) registrado exitosamente.`);
    } catch (error) {
        if (error.code === 11000) { // Error de clave duplicada de MongoDB
            console.warn(`‚ö†Ô∏è Intento de registro duplicado para la c√©dula ${cedula} (admin).`);
            await sendWhatsAppMessage(telefono, `‚ùå La c√©dula ${cedula} ya est√° registrada en el sistema.`);
            return res.status(409).send(`‚ùå La c√©dula ${cedula} ya est√° registrada.`);
        }
        console.error('‚ùå Error al registrar usuario v√≠a admin:', error);
        res.status(500).send('‚ùå Error interno del servidor al procesar el registro.');
    }
});

// Endpoint principal para recibir mensajes de WhatsApp
app.post('/webhook', async (req, res) => {
    try {
        const message = req.body;
        console.log("üì• Mensaje recibido en webhook:", JSON.stringify(message, null, 2));

        // Validaci√≥n b√°sica del mensaje
        if (!message || !message.sender || message.sender === 'status@broadcast') {
            console.log("‚ÑπÔ∏è Mensaje de estado o inv√°lido recibido, ignorando.");
            return res.status(200).send('OK'); // Responder OK para evitar reintentos de Green API
        }

        const from = message.sender; // Ej: "584123456789@c.us"
        const text = (message.body || '').trim(); // Manejar posibles mensajes sin body

        // Extraer n√∫mero de tel√©fono limpio (ej: "04123456789")
        const phoneNumberClean = from.replace('@c.us', '').startsWith('58') ? from.replace('@c.us', '').replace('58', '0') : from.replace('@c.us', '');
        const fullPhoneNumber = from.replace('@c.us', ''); // Para usar con Green API

        // --- Manejo del Estado de Conversaci√≥n ---
        let state = userConversationState.get(from);
        if (!state) {
            state = { step: 'menu' }; // Inicializar estado si no existe
            userConversationState.set(from, state);
        }

        console.log(`üí¨ Usuario ${fullPhoneNumber} en paso: ${state.step}. Mensaje: "${text}"`);

        // --- L√ìGICA DE FLUJO DE CONVERSACI√ìN ---

        // 1. Mensaje de bienvenida o reseteo
        if (text.toLowerCase().includes('hola') || text === '') {
            state.step = 'menu';
            await sendWhatsAppMessage(fullPhoneNumber, `üëã ¬°Hola! Bienvenido a *AQUITA*.\n¬øEn qu√© puedo ayudarte?\n\n1Ô∏è‚É£ *Registro* (usuarios)\n2Ô∏è‚É£ *Afiliaci√≥n* (negocios)\n3Ô∏è‚É£ *Compartir pantalla* de stream\n\nPor favor, responde con el *n√∫mero* de tu opci√≥n.`);

            // 2. Opci√≥n de Registro
        } else if (text === '1') {
            state.step = 'nombre';
            await sendWhatsAppMessage(fullPhoneNumber, `üìù *Registro de Usuario*\nPor favor, dime tu *nombre*:`);

            // 3. Opci√≥n de Afiliaci√≥n
        } else if (text === '2') {
            await sendWhatsAppMessage(fullPhoneNumber, `üè™ *Afiliaci√≥n de Negocios*\nPara afiliar tu negocio, escr√≠benos al siguiente n√∫mero:\nüîó https://wa.me/584149577176`);

            // 4. Opci√≥n de Compartir Stream
        } else if (text === '3') {
            state.step = 'stream_enlace';
            await sendWhatsAppMessage(fullPhoneNumber, `üì∫ *Compartir Pantalla de Stream*\nPor favor, env√≠ame el *enlace* de tu transmisi√≥n en vivo (ej: https://twitch.tv/tunombre):`);

            // --- FLUJO DE REGISTRO (pasos secuenciales) ---
        } else if (state.step === 'nombre') {
            if (text.length < 2) {
                await sendWhatsAppMessage(fullPhoneNumber, `‚ùå El nombre debe tener al menos 2 caracteres. Por favor, int√©ntalo de nuevo:`);
                return res.status(200).send('OK');
            }
            state.nombre = text;
            state.step = 'apellido';
            await sendWhatsAppMessage(fullPhoneNumber, `Apellido:`);

        } else if (state.step === 'apellido') {
            if (text.length < 2) {
                await sendWhatsAppMessage(fullPhoneNumber, `‚ùå El apellido debe tener al menos 2 caracteres. Por favor, int√©ntalo de nuevo:`);
                return res.status(200).send('OK');
            }
            state.apellido = text;
            state.step = 'cedula';
            await sendWhatsAppMessage(fullPhoneNumber, `C√©dula (formato: V-12345678):`);

        } else if (state.step === 'cedula') {
            const cedulaRegex = /^([VE])-(\d{8})$/i;
            const match = text.match(cedulaRegex);

            if (!match) {
                await sendWhatsAppMessage(fullPhoneNumber, `‚ùå Formato inv√°lido. Por favor, usa el formato *V-12345678* o *E-12345678*:`);
                return res.status(200).send('OK');
            }

            const nacionalidad = match[1].toUpperCase();
            const numCedula = match[2];
            const fullCedula = `${nacionalidad}-${numCedula}`;

            state.cedula = fullCedula;
            state.step = 'telefono';
            await sendWhatsAppMessage(fullPhoneNumber, `Tel√©fono (formato: 04123456789):`);

        } else if (state.step === 'telefono') {
            const telefonoRegex = /^0\d{10}$/; // Debe empezar con 0 y tener 11 d√≠gitos
            if (!telefonoRegex.test(text)) {
                await sendWhatsAppMessage(fullPhoneNumber, `‚ùå Formato inv√°lido. Por favor, usa el formato *04123456789*:`);
                return res.status(200).send('OK');
            }

            state.telefono = text;

            // --- Validaci√≥n Final y Registro ---
            try {
                console.log(`üîç Validando c√©dula ${state.cedula} para ${state.nombre} ${state.apellido}...`);
                const cedulaParts = state.cedula.split('-');
                // ‚úÖ Correcci√≥n: Eliminar espacio extra en la URL
                const response = await axios.get(`https://api.cedula.com.ve/api/v1`, {
                    params: {
                        app_id: '1339',
                        token: '6a97ffc07f52fa8dc487e4d3a4e69f33',
                        nacionalidad: cedulaParts[0],
                        cedula: cedulaParts[1],
                    },
                    timeout: 15000 // Timeout de 15 segundos
                });

                console.log('üìÑ Respuesta de API de c√©dula (webhook):', JSON.stringify(response.data, null, 2));

                if (response.data.error) {
                    console.error('‚ùå Error de la API de c√©dula (webhook):', response.data.error);
                    if (response.data.error.toLowerCase().includes('rate limit')) {
                        await sendWhatsAppMessage(fullPhoneNumber, '‚ö†Ô∏è *L√≠mite de solicitudes alcanzado*. Por favor, intenta nuevamente en 2 horas.');
                    } else {
                        await sendWhatsAppMessage(fullPhoneNumber, `‚ùå *C√©dula no v√°lida o no encontrada* (${state.cedula}).`);
                    }
                    userConversationState.delete(from); // Reiniciar estado
                    return res.status(200).send('OK');
                }

                if (!response.data.data || !response.data.data.primer_nombre || !response.data.data.primer_apellido) {
                    console.error('‚ùå Estructura de respuesta inesperada de la API de c√©dula (webhook).');
                    await sendWhatsAppMessage(fullPhoneNumber, '‚ùå *Error inesperado al validar la c√©dula*. Int√©ntalo m√°s tarde.');
                    userConversationState.delete(from);
                    return res.status(200).send('OK');
                }

                const apiNombre = response.data.data.primer_nombre;
                const apiApellido = response.data.data.primer_apellido;

                if (!apiNombre.toLowerCase().includes(state.nombre.toLowerCase()) || !apiApellido.toLowerCase().includes(state.apellido.toLowerCase())) {
                    await sendWhatsAppMessage(fullPhoneNumber, `‚ùå *Los datos no coinciden* con los registros oficiales.\nIngresaste: *${state.nombre} ${state.apellido}*\nRegistro oficial: *${apiNombre} ${apiApellido}*`);
                    userConversationState.delete(from);
                    return res.status(200).send('OK');
                }

                // Guardar en MongoDB
                const newUser = new User({
                    nombre: state.nombre,
                    apellido: state.apellido,
                    cedula: state.cedula,
                    telefono: state.telefono
                });

                await newUser.save();
                console.log(`‚úÖ Usuario ${state.nombre} ${state.apellido} (${state.cedula}) registrado v√≠a WhatsApp.`);
                await sendWhatsAppMessage(fullPhoneNumber, `üéâ *¬°Registro exitoso!*\nBienvenido, *${state.nombre} ${state.apellido}*.\nTu c√©dula *${state.cedula}* ha sido verificada.`);

            } catch (dbError) {
                if (dbError.code === 11000) {
                    console.warn(`‚ö†Ô∏è Intento de registro duplicado para la c√©dula ${state.cedula} v√≠a WhatsApp.`);
                    await sendWhatsAppMessage(fullPhoneNumber, `‚ùå *La c√©dula ${state.cedula} ya est√° registrada* en nuestro sistema.`);
                } else {
                    console.error('‚ùå Error al guardar usuario en MongoDB (webhook):', dbError);
                    await sendWhatsAppMessage(fullPhoneNumber, '‚ùå *Error al guardar el registro*. Por favor, int√©ntalo m√°s tarde.');
                }
            } finally {
                // Reiniciar estado de conversaci√≥n
                userConversationState.delete(from);
            }

            // --- FLUJO DE STREAM (pasos secuenciales) ---
        } else if (state.step === 'stream_enlace') {
            if (!text.startsWith('http')) {
                await sendWhatsAppMessage(fullPhoneNumber, `‚ùå *Enlace inv√°lido*. Debe comenzar con *http://* o *https://*. Por favor, int√©ntalo de nuevo:`);
                return res.status(200).send('OK');
            }
            state.stream_enlace = text;
            state.step = 'stream_ciudad';
            await sendWhatsAppMessage(fullPhoneNumber, `Ciudad donde se encuentra la transmisi√≥n:`);

        } else if (state.step === 'stream_ciudad') {
            if (text.length < 3) {
                await sendWhatsAppMessage(fullPhoneNumber, `‚ùå El nombre de la ciudad debe tener al menos 3 caracteres. Por favor, int√©ntalo de nuevo:`);
                return res.status(200).send('OK');
            }
            state.stream_ciudad = text;

            // Solicitar c√©dula del usuario que comparte el stream
            state.step = 'stream_cedula';
            await sendWhatsAppMessage(fullPhoneNumber, `Para finalizar, por favor env√≠ame tu *n√∫mero de c√©dula* (formato: V-12345678) para asociar el stream a tu cuenta:`);

        } else if (state.step === 'stream_cedula') {
            const cedulaRegex = /^([VE])-(\d{8})$/i;
            const match = text.match(cedulaRegex);

            if (!match) {
                await sendWhatsAppMessage(fullPhoneNumber, `‚ùå Formato inv√°lido. Por favor, usa el formato *V-12345678* o *E-12345678*:`);
                return res.status(200).send('OK');
            }

            const nacionalidad = match[1].toUpperCase();
            const numCedula = match[2];
            const fullCedula = `${nacionalidad}-${numCedula}`;

            // Verificar si el usuario con esa c√©dula existe
            const userExists = await User.findOne({ cedula: fullCedula });
            if (!userExists) {
                await sendWhatsAppMessage(fullPhoneNumber, `‚ùå *No se encontr√≥ un usuario registrado* con la c√©dula *${fullCedula}*. Por favor, reg√≠strate primero usando la opci√≥n 1.`);
                userConversationState.delete(from); // Reiniciar estado
                return res.status(200).send('OK');
            }

            // Guardar stream en MongoDB
            try {
                const newStream = new Stream({
                    enlace: state.stream_enlace,
                    ciudad: state.stream_ciudad,
                    cedulaUsuario: fullCedula // Asociar al usuario
                });

                await newStream.save();
                console.log(`‚úÖ Solicitud de stream recibida de ${fullCedula} (${state.stream_enlace}) para ${state.stream_ciudad}.`);
                await sendWhatsAppMessage(fullPhoneNumber, `‚úÖ *¬°Solicitud recibida!*\nNuestro equipo revisar√° tu stream (*${state.stream_enlace}*) en *${state.stream_ciudad}* y lo agregar√° a *AQUITA+* pronto.`);

            } catch (streamError) {
                console.error('‚ùå Error al guardar solicitud de stream:', streamError);
                await sendWhatsAppMessage(fullPhoneNumber, '‚ùå *Error al guardar la solicitud*. Por favor, int√©ntalo m√°s tarde.');
            } finally {
                userConversationState.delete(from); // Reiniciar estado
            }

            // --- Manejo de entradas no reconocidas ---
        } else {
            console.log(`‚ùì Entrada no reconocida de ${fullPhoneNumber}: "${text}". Estado actual: ${state.step}`);
            // Opcional: Reiniciar o pedir que elija una opci√≥n
            await sendWhatsAppMessage(fullPhoneNumber, `‚ùì No entend√≠ tu mensaje.\nPor favor, elige una opci√≥n:\n1Ô∏è‚É£ Registro\n2Ô∏è‚É£ Afiliaci√≥n\n3Ô∏è‚É£ Compartir Stream`);
            // O reiniciar el flujo:
            // state.step = 'menu';
            // await sendWhatsAppMessage(fullPhoneNumber, `...mensaje de men√∫...`);
        }

    } catch (error) {
        console.error('üí• Error cr√≠tico en el webhook:', error);
        // No enviar mensaje al usuario por un error interno del servidor
        // Pero es importante responder a Green API para que no reenv√≠e el mensaje
    }

    res.status(200).send('OK');
});

// --- INICIO DEL SERVIDOR ---
app.listen(PORT, '0.0.0.0', () => { // Bind a 0.0.0.0 para Render
    console.log(`üöÄ Servidor AQUITA WhatsApp Bot corriendo en http://0.0.0.0:${PORT}`);
});
